#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.18
#  in conjunction with Tcl version 8.6
#    Oct 31, 2018 09:17:42 PM +0200  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import AO_gui_support
import lists
import startAO

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    AO_gui_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    AO_gui_support.set_Tk_var()
    top = Toplevel1 (w)
    AO_gui_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#d9d9d9' # X11 color: 'gray85'

        top.geometry("512x859+1087+174")
        # top.geometry("654x859+1331+183")
        top.title("AO lounchers")
        top.configure(background="#d9d9d9")

        self.Button1 = tk.Button(top)
        self.Button1.place(relx=0.033, rely=0.02, height=42, width=108)
        self.Button1.configure(activebackground="#d9d9d9")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''run games''')
        self.Button1.configure(command=self.run_button)

        self.chckbtn = []
        x=0
        y=0
        for acc in lists.alist:

            for ava in acc[1]:
                self.chckbtn.append(self.chkbtn_gen(ava, x, y))
                x=x+0.2
            x=0
            y=y+0.035

    def chkbtn_gen(self,ava,x,y):
        var = tk.BooleanVar()
        name = ava
        Checkbutton = tk.Checkbutton(None)
        Checkbutton.place(relx=0.024+x, rely=0.112+y, relheight=0.043, relwidth=0.262)
        Checkbutton.configure(activebackground="#d9d9d9")
        Checkbutton.configure(activeforeground="#000000")
        Checkbutton.configure(background="#d9d9d9")
        Checkbutton.configure(disabledforeground="#a3a3a3")
        Checkbutton.configure(foreground="#000000")
        Checkbutton.configure(highlightbackground="#d9d9d9")
        Checkbutton.configure(highlightcolor="black")
        Checkbutton.configure(justify='left', anchor='w')
        Checkbutton.configure(text=ava)
        Checkbutton.configure(variable=var)
        Checkbutton.configure(command= lambda :self.check_list(name,var))

        return [Checkbutton, var, name]

    def check_list(self, name, var):
        for aca in lists.alist:
            if name in aca[1]:

                for i in aca[1]:
                    for x in self.chckbtn:
                        if (x[2] == i)and x[2] != name:
                            if var.get() == True:
                                x[0].configure(state=tk.DISABLED)
                            if var.get() == False:
                                x[0].configure(state=tk.NORMAL)
                break


    def run_button(self):
        playlist = []
        for btn in self.chckbtn:
            if btn[1].get() is True:
                playlist.append(btn[2])
        print (playlist)
        # startAO.run_setup(playlist)

if __name__ == '__main__':
    vp_start_gui()